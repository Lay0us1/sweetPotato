package burp.Ui;

import burp.Bootstrap.Config;
import burp.Bootstrap.Tools;
import burp.Controller.DirScanThread;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Base64;

public class QuickFofa extends JDialog {
    private JPanel mainPanel;
    private JButton enterButton;
    private JButton cancelButton;
    private JTextField keyTextField;
    private JTextField dorkTextField;
    private JPanel optionPanel;
    private JLabel keyLabel;
    private JLabel dorkLabel;
    private JPanel buttonPanel;
    private JTextField apiTextField;
    private JTextField emailTextField;
    private JPanel apiPanel;
    private JPanel keyPanel;
    private JPanel dorkPanel;
    private JPanel maxSizePanel;
    private JTextField maxSizeTextField;
    private JLabel apiLabel;
    private JPanel emailPanel;
    private JLabel emailLabel;
    private JLabel maxSizeLabel;
    private Config config;

    public QuickFofa(Config config) {
        this.config = config;

        $$$setupUI$$$();
        init();
    }

    public void init() {
        this.setTitle("快速FoFa");
        this.setSize(350, 200);
        this.setLocationRelativeTo(null);
        this.add(mainPanel);

        cancelButton.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                setVisible(false);
            }

            @Override
            public void mousePressed(MouseEvent e) {

            }

            @Override
            public void mouseReleased(MouseEvent e) {

            }

            @Override
            public void mouseEntered(MouseEvent e) {

            }

            @Override
            public void mouseExited(MouseEvent e) {

            }
        });

        enterButton.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {

            }

            @Override
            public void mousePressed(MouseEvent e) {
                // 触发执行扫描
                String url = apiTextField.getText().trim();
                String email = emailTextField.getText().trim();
                String key = keyTextField.getText().trim();
                int maxSize = Integer.parseInt(maxSizeTextField.getText().trim());
                String dork = dorkTextField.getText().trim();
                String base64Dork = Base64.getEncoder().encodeToString(dork.getBytes(StandardCharsets.UTF_8));

                // 检查是否有参数为空，如果没有，则不允许往下的逻辑
                if(dork.length() == 0 || url.length() == 0 || key.length() == 0 || maxSizeTextField.getText().length() == 0 || email.length() == 0){
                    JOptionPane.showMessageDialog(mainPanel,"不允许有参数为空！","参数为空！",JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // 执行api
                ArrayList<String> targets = new ArrayList<>();
                targets.add(url + "/api/v1/search/all?email=" + email + "&key=" + key + "&page=1&size=" + maxSize + "&fields=host,ip,domain,port,title,protocol,server&qbase64=" + base64Dork);
                // 将api访问的结果，给到分析流程
                DirScanThread dirScanThread = new DirScanThread(targets, config.getTags(), config, "正常访问");
                Thread t = new Thread(dirScanThread);
                t.start();

                // 展示确定之后的提示
                JOptionPane.showMessageDialog(mainPanel,"正在进行查询，查询结果的流量将提供进行分析！请确保提供的Key和搜索语法正确！","执行成功！",JOptionPane.INFORMATION_MESSAGE);
                // 清空dork
                dorkTextField.setText("");
                // 隐藏窗口
                setVisible(false);
            }

            @Override
            public void mouseReleased(MouseEvent e) {

            }

            @Override
            public void mouseEntered(MouseEvent e) {

            }

            @Override
            public void mouseExited(MouseEvent e) {

            }
        });
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("QuickFofa");
        frame.setContentPane(new QuickFofa(new Config()).mainPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        optionPanel = new JPanel();
        optionPanel.setLayout(new FormLayout("fill:d:grow", "center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow"));
        mainPanel.add(optionPanel, BorderLayout.CENTER);
        apiPanel = new JPanel();
        apiPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        CellConstraints cc = new CellConstraints();
        optionPanel.add(apiPanel, cc.xy(1, 1));
        apiLabel = new JLabel();
        apiLabel.setText(" FoFa Api:  ");
        apiPanel.add(apiLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        apiTextField = new JTextField();
        apiTextField.setText("https://fofa.info");
        apiPanel.add(apiTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(250, -1), new Dimension(250, -1), 0, false));
        emailPanel = new JPanel();
        emailPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        optionPanel.add(emailPanel, cc.xy(1, 3));
        emailLabel = new JLabel();
        emailLabel.setText(" FoFa Email:");
        emailPanel.add(emailLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        emailTextField = new JTextField();
        emailPanel.add(emailTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(250, -1), new Dimension(250, -1), 0, false));
        keyPanel = new JPanel();
        keyPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        optionPanel.add(keyPanel, cc.xy(1, 5));
        keyLabel = new JLabel();
        keyLabel.setText(" FoFa Key:  ");
        keyPanel.add(keyLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        keyTextField = new JTextField();
        keyPanel.add(keyTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(250, -1), new Dimension(250, -1), 0, false));
        maxSizePanel = new JPanel();
        maxSizePanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        optionPanel.add(maxSizePanel, cc.xy(1, 7));
        maxSizeLabel = new JLabel();
        maxSizeLabel.setText(" Max Size:  ");
        maxSizePanel.add(maxSizeLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        maxSizeTextField = new JTextField();
        maxSizeTextField.setText("10000");
        maxSizePanel.add(maxSizeTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(250, -1), new Dimension(250, -1), 0, false));
        dorkPanel = new JPanel();
        dorkPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        optionPanel.add(dorkPanel, cc.xy(1, 9));
        dorkLabel = new JLabel();
        dorkLabel.setText(" Dork:       ");
        dorkPanel.add(dorkLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dorkTextField = new JTextField();
        dorkPanel.add(dorkTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(250, -1), new Dimension(250, -1), 0, false));
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        mainPanel.add(buttonPanel, BorderLayout.SOUTH);
        enterButton = new JButton();
        enterButton.setText("确定");
        buttonPanel.add(enterButton);
        cancelButton = new JButton();
        cancelButton.setText("取消");
        buttonPanel.add(cancelButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
